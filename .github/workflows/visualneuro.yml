name: Build VisualNeuro

on: 
  push:
      branches:
        - main
  pull_request:

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'         # recognized by vcpkg
  # QT_DEBUG_PLUGINS: 1                                        # print qt plugin debug info

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest] #, ubuntu-20.04]
        include:
          - os: 'windows-latest'
            triplet: 'x64-windows'
            mono: ''
            cmake: '--preset msvc-dev-vcpkg-visualneuro -DIVW_MODULE_HDF5=OFF'
            targets: 'ALL_BUILD package'
            installer: 'visualneuro-installer-win'
            artifact: 'build/visualneuro-v*.exe'
          - os: 'macos-latest'
            triplet: 'x64-osx'
            mono: 'mono'
            cmake: '--preset ninja-vcpkg-visualneuro -DIVW_MODULE_HDF5=OFF'
            generator: 'Ninja'
            targets: 'all package'
            installer: 'visualneuro-installer-macos'
            artifact: 'build/inviwo-v*.dmg'
         # - os: 'ubuntu-20.04'
         #   triplet: 'x64-linux'
         #   mono: 'mono'
         #   cmake: '--preset ninja-vcpkg-visualneuro -DIVW_USE_SIGAR=OFF -DIVW_MODULE_HDF5=OFF' 
         #   generator: 'Ninja' 
         #   targets: 'ALL_BUILD package'
         #   installer: 'visualneuro-installer-ubuntu'
         #   artifact: 'build/visualneuro-v*.zip'
      fail-fast: false
      
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    
    steps:
    - name: Chocolatey Install
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install nsis
        GP=`cygpath -u $GITHUB_PATH` 
        
        echo "/c/Program Files (x86)/NSIS" >> $GP

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Clone Inviwo
      uses: actions/checkout@v2
      with:
        repository: 'inviwo/inviwo'
        path: 'inviwo' 
        submodules: 'true'

    - name: Clone VisualNeuro
      uses: actions/checkout@v2
      with: 
        path: visualneuro
        submodules: recursive

    - name: Clone VCPKG
      uses: actions/checkout@v2
      with:
        repository: 'microsoft/vcpkg'
        path: 'vcpkg' # The cmake vcpkg   present expects vcpkg to be next to the inviwo source folder
            
    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/visualneuro/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "visualneuro"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Apt Install, switch to gcc-11
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libglew-dev ninja-build gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        sudo update-alternatives --set gcc /usr/bin/gcc-11
      
    - name: Brew Install
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install ninja 

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 6.2.3
        dir: ${{ github.workspace }}

    - name: Copy CMakePresets to Inviwo
      shell: bash
      run: >
        cp "visualneuro/CMakePresets.json" "inviwo/CMakeUserPresets.json"

    - name: Configure CMake
      shell: bash
      run: >
        cmake -S inviwo -B build
        -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}'
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        ${{ matrix.cmake }}

    - name: Setup C++ Log matchers
      uses: Trass3r/setup-cpp@v1

    - name: Build
      timeout-minutes: 360
      shell: bash
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel --target ${{ matrix.targets }}

    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.installer }}
        path: ${{ matrix.artifact }}


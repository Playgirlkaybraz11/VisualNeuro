/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2018-2019 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

#include <modules/visualneuro/visualneuromodule.h>
#include <modules/visualneuro/processors/brainmask.h>
#include <modules/visualneuro/processors/brainraycaster.h>
#include <modules/visualneuro/processors/dataframecolumnfilter.h>
#include <modules/visualneuro/processors/dataframewebbrowserprocessor.h>
#include <modules/visualneuro/processors/groupcontroller.h>
#include <modules/visualneuro/processors/joindataframes.h>
#include <modules/visualneuro/processors/volumesequencefilter.h>
#include <modules/visualneuro/processors/volume4dsequenceslicefilter.h>
#include <modules/visualneuro/processors/volume4dsequencesource.h>
#include <modules/visualneuro/processors/volumeregionparametercorrelation.h>
#include <modules/visualneuro/processors/volumesequencemean.h>
#include <modules/visualneuro/processors/volumeatlascenterpositions.h>
#include <modules/visualneuro/processors/volumettest.h>
#include <modules/visualneuro/processors/volumevariancemean.h>
#include <modules/visualneuro/processors/volumeatlasprocessor.h>
#include <modules/visualneuro/processors/parametervolumesequencecorrelation.h>
#include <modules/visualneuro/processors/camerapositioncontroller.h>
#include <modules/visualneuro/processors/fmritransferfunctioncontroller.h>
#include <modules/visualneuro/statistics/correlation.h>
#include <modules/visualneuro/statistics/statisticstypes.h>
#include <modules/opengl/shader/shadermanager.h>

#include <modules/json/jsonmodule.h>
#include <modules/json/io/json/optionpropertyjsonconverter.h>

#include <modules/webbrowser/webbrowsermodule.h>
#include <modules/webbrowser/properties/propertywidgetcef.h>

// Autogenerated
#include <modules/visualneuro/shader_resources.h>


namespace inviwo {

VisualNeuroModule::VisualNeuroModule(InviwoApplication* app) : InviwoModule(app, "VisualNeuro") {
    visualneuro::addShaderResources(ShaderManager::getPtr(), {getPath(ModulePath::GLSL)});

    registerProcessor<BrainMask>();
    registerProcessor<BrainRayCaster>();
    registerProcessor<DataFrameColumnFilter>();
    registerProcessor<DataFrameWebBrowserProcessor>();
    registerProcessor<GroupController>();
    registerProcessor<JoinDataFrames>();
    registerProcessor<VolumeSequenceFilter>();
    registerProcessor<Volume4DSequenceSliceFilter>();
    registerProcessor<Volume4DSequenceSource>();
    registerProcessor<VolumeRegionParameterCorrelation>();
    registerProcessor<VolumeSequenceMean>();
    registerProcessor<VolumeTTest>();
    registerProcessor<VolumeVarianceMean>();
    registerProcessor<VolumeAtlasProcessor>();
    registerProcessor<ParameterVolumeSequenceCorrelation>();
    registerProcessor<CameraPositionController>();
    registerProcessor<VolumeAtlasCenterPositions>();
    registerProcessor<fMRITransferFunctionController>();
    // Add a directory to the search path of the Shadermanager
    // ShaderManager::getPtr()->addShaderSearchPath(getPath(ModulePath::GLSL));

    // Register objects that can be shared with the rest of inviwo here:

    // Processors
    // registerProcessor<VisualNeuroProcessor>();

    // Properties
    // registerProperty<VisualNeuroProperty>();
    auto jsonModule = app->getModuleByType<JSONModule>();
    jsonModule->registerPropertyJSONConverter<OptionProperty<stats::StatisticsType>>();
    jsonModule->registerPropertyJSONConverter<OptionProperty<stats::TailTest>>();
    auto browserModule = app->getModuleByType<WebBrowserModule>();
    browserModule
        ->registerPropertyWidgetCEF<PropertyWidgetCEF, OptionProperty<stats::StatisticsType>>();
    browserModule->registerPropertyWidgetCEF<PropertyWidgetCEF, OptionProperty<stats::TailTest>>();
    // Readers and writes
    // registerDataReader(std::make_unique<VisualNeuroReader>());
    // registerDataWriter(std::make_unique<VisualNeuroWriter>());

    // Data converters
    // registerRepresentationConverter(std::make_unique<VisualNeuroDisk2RAMConverter>());

    // Ports
    // registerPort<VisualNeuroOutport>();
    // registerPort<VisualNeuroInport>();

    // PropertyWidgets
    // registerPropertyWidget<VisualNeuroPropertyWidget, VisualNeuroProperty>("Default");

    // Dialogs
    // registerDialog<VisualNeuroDialog>(VisualNeuroOutport);

    // Other things
    // registerCapabilities(std::make_unique<VisualNeuroCapabilities>());
    // registerSettings(std::make_unique<VisualNeuroSettings>());
    // registerMetaData(std::make_unique<VisualNeuroMetaData>());
    // registerPortInspector("VisualNeuroOutport", "path/workspace.inv");
    // registerProcessorWidget(std::string processorClassName, std::unique_ptr<ProcessorWidget> processorWidget); 
    // registerDrawer(util::make_unique_ptr<VisualNeuroDrawer>());
}

}  // namespace inviwo
